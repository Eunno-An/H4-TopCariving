# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: TopCariving Deploy ‚òÄÔ∏è

on:
  push:
    branches:
      - 'dev'
    paths:
      - '**.java'
      - '**.sql'
      - '**.yml'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        if: startsWith(github.ref, 'refs/heads/feat/back/')
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./backend

      - name: Build with Gradle
        run: ./gradlew clean build -Pjasypt.password='${{ secrets.JASYPT_SECRET }}'
        working-directory: ./backend

      - name: Deploy Prod use SCP For Main Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_ADDRESS }}
          username: ${{ secrets.EC2_USERNAME }}
          port: ${{ secrets.EC_PORT }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "./backend/build/libs/*.jar"
          target: "/home/ubuntu/deploy"

      - name: Deploy Prod use SCP For Replica Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_REPLICA_ADDRESS }}
          username: ${{ secrets.EC2_REPLICA_USERNAME }}
          port: ${{ secrets.EC_REPLICA_PORT }}
          key: ${{ secrets.EC2_REPLICA_PRIVATE_KEY }}
          source: "./backend/build/libs/*.jar"
          target: "/home/ubuntu/deploy"

      - name: Run zero-downtime deployment
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_ADDRESS }}
          username: ${{ secrets.EC2_USERNAME }}
          port: ${{ secrets.EC2_PORT }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd ~/deploy/
            ./deploy_zero_down.sh

      - name: Run server2 deployment
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_REPLICA_ADDRESS }}
          username: ${{ secrets.EC2_REPLICA_USERNAME }}
          port: ${{ secrets.EC2_REPLICA_PORT }}
          key: ${{ secrets.EC2_REPLICA_PRIVATE_KEY }}
          script: |
            cd ~/deploy/
            ./deploy.sh

      - name: set load balancing using nginx
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_ADDRESS }}
          username: ${{ secrets.EC2_USERNAME }}
          port: ${{ secrets.EC2_PORT }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd ~/deploy/
            ./deploy_server2.sh

      - name: Commit Î©îÏãúÏßÄÏóêÏÑú Í∞úÌñâÎ¨∏Ïûê Î∂ÑÎ¶¨
        id: extract_message
        run: |
          MESSAGE="${{ github.event.head_commit.message }}"
          EXTRACTED_MESSAGE=$(echo "$MESSAGE" | awk -F '\\n' '{print $1}')
          echo "::set-output name=message::$EXTRACTED_MESSAGE"

      - name: slack-send message
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚òÄÔ∏è*Backend Î∞∞Ìè¨ ÌòÑÌô©*‚òÄÔ∏è: `${{ job.status }}`\n",
              "attachments": [
                {
                    "text": "üòéBackendÍ∞Ä Ïû¨Î∞∞Ìè¨Î•º ÏãúÏûëÌñàÏäµÎãàÎã§üòé: *${{ steps.extract_message.outputs.message }}*",
                    "color": "${{ job.status == 'success' && '#36a64f' || '#d9534f' }}",
                    "attachment_type": "default",
                    "actions": [
                      {
                        "name": "Github_PR_Button",
                        "text": "Github PRÎ°úüî•",
                        "type": "button",
                        "url": "${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                      },
                      {
                        "name": "swagger",
                        "text": "SwaggerÎ°ú Ïù¥ÎèôüëÄ",
                        "type": "button",
                        "style": "danger",
                        "url": "${{ secrets.SWAGGER_API }}"
                      }
                    ]
                  }
                ]
              }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

